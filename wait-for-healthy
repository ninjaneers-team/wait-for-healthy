#!/bin/sh

TIMEOUT=15
QUIET=0

echoerr() {
  if [ "$QUIET" -ne 1 ]; then printf "%s\n" "$*" 1>&2; fi
}

usage() {
  exitcode="$1"
  cat << USAGE >&2
Usage:
  $cmdname url [-m method] [-t timeout] [-- command args]
  -q | --quiet                        Do not output any status messages
  -t TIMEOUT | --timeout=timeout      Timeout in seconds, zero for no timeout
  -m METHOD | --method=method         HTTP Status, GET as default
  -- COMMAND ARGS                     Execute command with args after the test finishes
USAGE
  exit "$exitcode"
}

wait_for() {
  for i in `seq $TIMEOUT` ; do
    result=$(curl -X $METHOD -s -o /dev/null -w "%{http_code}" $URL)
    
    if [ $result = 200 -o $result = 201 ] ; then
      if [ $# -gt 0 ] ; then
        exec "$@"
      fi
      exit 0
    fi
    sleep 1
  done
  echo "Operation timed out" >&2
  exit 1
}

while [ $# -gt 0 ]
do
  case "$1" in
    --method=*)
    METHOD="${1#*=}"
    shift 1
    ;;
    -m)
    METHOD="$2"
    shift 2
    ;;
    -q | --quiet)
    QUIET=1
    shift 1
    ;;
    -t)
    TIMEOUT="$2"
    if [ "$TIMEOUT" = "" ]; then break; fi
    shift 2
    ;;
    --timeout=*)
    TIMEOUT="${1#*=}"
    shift 1
    ;;
    --)
    shift
    break
    ;;
    --help)
    usage 0
    ;;
    *)
    URL=$1
    shift 1
    ;;
  esac
done

if [ "$METHOD" = "" ]; then
  METHOD="GET"
fi

if [ "$URL" = "" ]; then
  echoerr "Error: you need to provide a url to test healthiness."
  usage 2
fi

wait_for "$@"
